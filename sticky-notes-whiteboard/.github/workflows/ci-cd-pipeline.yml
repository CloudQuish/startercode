name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js for the project
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    # Step 3: Cache dependencies
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          frontend/node_modules
          backend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 4: Install dependencies and run tests
    - name: Install dependencies and run tests
      run: |
        cd frontend && npm install && npm run test
        cd ../backend && npm install && npm run test

    # Step 5: Build the frontend and backend
    - name: Build Frontend and Backend
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build

    # Step 6: Run security checks
    - name: Run Security Checks
      run: |
        cd frontend && npm audit --audit-level=moderate
        cd ../backend && npm audit --audit-level=moderate

    # Step 7: Deploy to server
    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /path/to/your/app
          export PORT=${{ secrets.PORT }}
          export POSTGRES_DATABASE_URL=${{ secrets.POSTGRES_DATABASE_URL }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          docker-compose down
          docker-compose up -d --build
